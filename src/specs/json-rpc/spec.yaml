openrpc: 1.0.0
info:
  title: Linea JSON-RPC API

methods:
- name: eth_sendBundle
  summary: Send a bundle of signed transactions to be executed atomically
  description: |
    Privately sends a bundle of signed transactions to be executed atomically, allowing the caller to 
    define transaction execution order. This enables services such as:
    - Frontrunning protection
    - Gas abstraction
    - Revert protection.

    Due to being sent atomically, the bundle will only be executed if all transactions are confirmed.

    The method can also improve UX, as users can review and approve a bundle of transactions with one 
    click, rather than multiple clicks. (Assuming the dapp and wallet being used have implemented [EIP-5792](https://eips.ethereum.org/EIPS/eip-5792), 
    and the wallet supports `eth_sendBundle` on Linea.)

    Note: Access to this endpoint is permissioned via Infura, and is not relevant for node operators as it's 
    available on sequencers only.

    Note: Methods for cancelling the bundle (`eth_cancelBundle`) or retrieving its status (`eth_getBundleStatus`) 
    are not yet supported. To get the bundle status, we recommend wallets use `eth_getTransactionReceipt` 
    on each transaction in the bundle. Dapps can fetch status by using the `wallet_getCallsStatus` 
    method added in EIP-5792.
  params:
    - name: bundleParams
      description: Bundle parameters object
      required: true
      schema:
        type: object
        required:
          - txs
          - blockNumber
        properties:
          txs:
            description: An array of signed transactions to execute in the bundle
            type: array
            items:
              $ref: '#/components/schemas/bytes'
          blockNumber:
            description: Hexadecimal block number for the block the bundle is valid in
            $ref: '#/components/schemas/uint'
          minTimestamp:
            description: Optional minimum timestamp for which the bundle is valid, in seconds since the unix epoch
            $ref: '#/components/schemas/uint'
          maxTimestamp:
            description: Optional maximum timestamp for which the bundle is valid, in seconds since the unix epoch
            $ref: '#/components/schemas/uint'
  result:
    name: bundleResponse
    description: The hash of the executed bundle
    schema:
      type: object
      required:
        - bundleHash
      properties:
        bundleHash:
          description: The hash of the executed bundle
          $ref: '#/components/schemas/hash32'
  examples:
    - name: eth_sendBundleExample
      jsonrpc: "2.0"
      method: "eth_sendBundle"
      id: 1
      params: [
        {
          "txs": ["0x1234567890abcdef...", "0x1234567890abcdef..."],
          "blockNumber": "0x123..."
        }
      ]
      result:
        bundleHash: "0x1234567890abcdef..."

- name: eth_sendRawTransaction
  summary: Submit a pre-signed transaction
  description: |
    Submits a pre-signed and serialized transaction and returns the transaction hash if successful. 
    This endpoint can help prevent transactions being rejected due to exceeding the sequencer's 
    per-block line limit. If the line count check fails, it returns an error message indicating the 
    transaction is likely to be rejected.

    Note: This method is functionally very similar to the Ethereum Mainnet equivalent. The difference 
    lies in the error responses.

    Note: The error relating to exceeding the line limit is only available on Besu nodes using 
    version `delivery-25` or later, together with `linea-sequencer` v0.1.4-test28 or later.

    On Linea, each transaction is represented by a sequence of lines representing the operations 
    happening at the EVM level. These lines are grouped by modules and are used as inputs to the prover. 
    In order to limit the resources required to generate proofs, limits are enforced on the maximum 
    number of lines each module can have. Hence, when a transaction is considered for inclusion in a 
    block, a line count check is performed to ensure it conforms to the requirements.
  params:
    - name: transaction
      description: The signed transaction data
      required: true
      schema:
        $ref: '#/components/schemas/bytes'
  result:
    name: transactionHash
    description: The 32-byte transaction hash, or the zero hash if the transaction is not yet available
    schema:
      $ref: '#/components/schemas/hash32'
  errors:
    - code: -32000
      message: Gas price too low
      description: Thrown when the transaction's gas is too low; specifically, the offered gas doesn't create enough of a buffer to ensure that Linea can cover the costs of finalizing the transaction on L1.
    - code: -32001
      message: Transaction line count above limit
      description: |
        Thrown when a module's line count exceeds its limit. The error will display in the format:
        "Transaction line count for module [A] is above the limit [B]"
        
        Where [A] is the module for which the number of lines is above the maximum allowed value [B],
        with [B] a parameter of the system.
  examples:
    - name: eth_sendRawTransactionExample
      jsonrpc: "2.0"
      method: "eth_sendRawTransaction"
      id: 1
      params: [
        "0xf869018203e882520894f17f52151ebef6c7334fad080c5704d77216b732881bc16d674ec80000801ba02da1c48b670996dcb1f447ef9ef00b33033c48a4fe938f420bec3e56bfd24071a062e0aa78a81bf0290afbc3a9d8e9a068e6d74caa66c5e0fa8a46deaae96b0833"
      ]
      result: "0xe670ec64341771606e55d6b4ca35a1a6b75ee3d5145a99d05921026d1527331"

- name: linea_estimateGas
  summary: Estimate the gas cost of a transaction
  description: |
    Generates and returns an estimate of how much gas is necessary to allow the transaction to complete and be published on Ethereum. The transaction will not be added to the blockchain.

    Note: `linea_estimateGas` uses the same inputs as the standard `eth_estimateGas`, but returns the recommended gas limit, the base fee per gas, and the priority fee per gas. We recommend using `linea_estimateGas` for more accurate results.

    The `priorityFeePerGas` returned by this method includes the cost of submitting the transaction to Ethereum, which can vary based on the size of the calldata.
  params:
    - name: transaction
      description: |
        Transaction call object. For `linea_estimateGas`, fields are optional because setting a gas limit is irrelevant to the estimation process (unlike transactions, in which gas limits apply).
        
        Fields:
        - `from`: [optional] 20 bytes - The address the transaction is sent from
        - `to`: [optional] 20 bytes - The address the transaction is directed to
        - `gas`: [optional] Hexadecimal value of the gas provided for the transaction execution
        - `gasPrice`: [optional] Hexadecimal value of the gas price used for each paid gas
        - `maxPriorityFeePerGas`: [optional] Maximum fee, in wei, the sender is willing to pay per gas above the base fee
        - `maxFeePerGas`: [optional] Maximum total fee (base fee + priority fee), in wei, the sender is willing to pay per gas
        - `value`: [optional] Hexadecimal value of the value sent with this transaction
        - `data`: [optional] Hash of the method signature and encoded parameters
      required: true
      schema:
        $ref: '#/components/schemas/LineaGenericTransaction'
    - name: stateOverride
      description: |
        Object that contains the address-to-state mapping to override state values. Each entry specifies a state that will be temporarily overridden before executing the call:
        - `balance`: [optional] Hexadecimal of the temporary account balance for the call execution
        - `nonce`: [optional] Hexadecimal of the temporary nonce value for the call execution
        - `code`: [optional] Bytecode to inject into the account
        - `stateDiff`: key:value pairs to override individual slots in the account storage
      required: false
      schema:
        type: object
    - name: block
      description: Block number or tag to estimate against
      required: false
      schema:
        $ref: '#/components/schemas/LineaBlockNumberOrTagNoFinalized'
  result:
    name: linea_estimateGasResponse
    description: The gas estimate details for the transaction.
    schema:
      type: object
      required:
        - baseFeePerGas
        - gasLimit
        - priorityFeePerGas
      properties:
        baseFeePerGas:
          description: The base fee per gas in wei (set at 7 wei on Linea)
          $ref: '#/components/schemas/uint'
        gasLimit:
          description: The estimated gas limit needed for the transaction (uses standard eth_estimateGas API calculation)
          $ref: '#/components/schemas/uint'
        priorityFeePerGas:
          description: |
            The recommended priority fee per gas in wei. Calculated considering:
            - Compressed transaction size
            - Layer 1 verification costs and capacity
            - Gas price ratio between layer 1 and layer 2
            - Transaction's gas usage
            - Minimum gas price on layer 2
            - Minimum margin for gas price estimation
          $ref: '#/components/schemas/uint'
  examples:
    - name: linea_estimateGasExample
      jsonrpc: "2.0"
      method: "linea_estimateGas"
      id: 1
      params:
        - name: transaction
          value:
            from: '0x971e727e956690b9957be6d51Ec16E73AcAC83A7'
            to: '0x791A479620F2A5cf58BB53D45CD3Ec72cFef22Fe'
            value: '0x21000'
      result:
        name: linea_estimateGasExampleResponse
        value:
          baseFeePerGas: "0x7"
          gasLimit: "0xcf08"
          priorityFeePerGas: "0x43a82a4"
- name: linea_getProof
  summary: Get account and storage proofs
  description: |
    Returns the account and storage values, including the Merkle proof, of the specified account.
    The supplied block parameter must be an L2 block that has been finalized on L1.

    - When an account or storage slot exists, the response includes the `leafIndex` and a proof of existence.
    - When an account or storage slot doesn't exist, the response will include the proof of the elements before and after it in the tree.

    In the example response below, the account exists but the slot doesn't.

    Note: A `finalized` block is a block on an L2 blockchain (Linea) that has been confirmed and validated by the L1 blockchain (Ethereum).
  params:
    - name: address
      description: A string representing the address (20 bytes) for which the proof is requested
      required: true
      schema:
        $ref: '#/components/schemas/address'
    - name: storageKeys
      description: An array of 32-byte storage keys to be proofed and included
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/hash32'
    - name: blockParameter
      description: |
        A hexadecimal block number, or one of the string tags:
        - `latest`: The most recent block
        - `earliest`: The genesis block
        - `pending`: The pending block
        - `finalized`: A block that has been confirmed and validated by Ethereum
      required: true
      schema:
        $ref: '#/components/schemas/LineaBlockNumberOrTag'
  result:
    name: getProofResponse
    description: The account and storage proofs
    schema:
      type: object
      required:
        - accountProof
        - storageProofs
      properties:
        accountProof:
          type: object
          required:
            - key
            - leafIndex
            - proof
          properties:
            key:
              description: The address of the account for which the proof is generated
              $ref: '#/components/schemas/address'
            leafIndex:
              description: The index of the leaf node in the sparse Merkle tree that corresponds to the account
              $ref: '#/components/schemas/uint'
            proof:
              type: object
              required:
                - proofRelatedNodes
                - value
              properties:
                proofRelatedNodes:
                  description: Array of nodes in the sparse Merkle tree used to construct the proof
                  type: array
                  items:
                    $ref: '#/components/schemas/bytes'
                value:
                  description: The value stored at the account's leaf node in the sparse Merkle tree
                  $ref: '#/components/schemas/bytes'
        storageProofs:
          type: array
          items:
            type: object
            required:
              - key
              - leftLeafIndex
              - leftProof
              - rightLeafIndex
              - rightProof
            properties:
              key:
                description: The requested storage key
                $ref: '#/components/schemas/hash32'
              leftLeafIndex:
                description: The index of the left leaf node in the sparse Merkle tree that corresponds to the storage slot
                $ref: '#/components/schemas/uint'
              leftProof:
                type: object
                required:
                  - proofRelatedNodes
                  - value
                properties:
                  proofRelatedNodes:
                    description: Array of nodes in the sparse Merkle tree used to construct the proof
                    type: array
                    items:
                      $ref: '#/components/schemas/bytes'
                  value:
                    description: The value stored at the left leaf node in the sparse Merkle tree
                    $ref: '#/components/schemas/bytes'
              rightLeafIndex:
                description: The index of the right leaf node in the sparse Merkle tree that corresponds to the storage slot
                $ref: '#/components/schemas/uint'
              rightProof:
                type: object
                required:
                  - proofRelatedNodes
                  - value
                properties:
                  proofRelatedNodes:
                    description: Array of nodes in the sparse Merkle tree used to construct the proof
                    type: array
                    items:
                      $ref: '#/components/schemas/bytes'
                  value:
                    description: The value stored at the right leaf node in the sparse Merkle tree
                    $ref: '#/components/schemas/bytes'
  examples:
    - name: linea_getProofExample
      jsonrpc: "2.0"
      method: "linea_getProof"
      id: 1
      params: [
        "0x87f21c771EAC9c547Eb22312997153D3A1fC40F6",
        ["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"],
        "0x7AA88B"
      ]
      result:
        accountProof:
          key: "0x87f21c771eac9c547eb22312997153d3a1fc40f6"
          leafIndex: "0x24c428"
          proof:
            proofRelatedNodes: [
              "0x000000000000000000000000000000000000000000000000000000000075965e0a85198ef8a5f75a15db565de5bff89b409ff5e507a7be546149c32b99044df3"
            ]
            value: "0x0000000000000000000000000000000000000000000000000000000000000001"
        storageProofs: [
          {
            key: "0x0000000000000000000000000000000000000000000000000000000000000001"
            leftLeafIndex: "0x0"
            leftProof:
              proofRelatedNodes: [
                "0x00000000000000000000000000000000000000000000000000000000000000030961e5d86a7bbdaac1547b2abfdb09dcaa0548b3d277a154b8c89081a22195a4"
              ]
              value: "0x0000000000000000000000000000000000000000000000000000000000000000"
            rightLeafIndex: "0x2"
            rightProof:
              proofRelatedNodes: [
                "0x00000000000000000000000000000000000000000000000000000000000000030961e5d86a7bbdaac1547b2abfdb09dcaa0548b3d277a154b8c89081a22195a4"
              ]
              value: "0x0000000000000000000000000000000000000000000000000000000000000064"
          }
        ]

- name: linea_getTransactionExclusionStatusV1
  summary: Check if a transaction was rejected
  description: |
    Queries a temporary database maintained by the transaction exclusion API service to check if a 
    transaction was rejected by the sequencer, connected P2P node, or RPC nodes for exceeding data line limits 
    that would prevent the prover from generating a proof.

    You can only check for transaction rejection within seven days of the transaction attempt. Querying
    transactions older than this will return a `null` response.

    If the transaction is rejected, the API call will succeed and provide the reason; otherwise, it
    will return `null`.
  params:
    - name: txHash
      description: The hash of the subject transaction
      required: true
      schema:
        $ref: '#/components/schemas/hash32'
  result:
    name: exclusionStatusResponse
    description: The transaction exclusion status, or null if not rejected or older than seven days
    schema:
      oneOf:
        - type: 'null'
        - type: object
          required:
            - txHash
            - from
            - nonce
            - txRejectionStage
            - reasonMessage
            - blockNumber
            - timestamp
          properties:
            txHash:
              description: The hash of the subject transaction
              $ref: '#/components/schemas/hash32'
            from:
              description: The public address of the account that sent the transaction
              $ref: '#/components/schemas/address'
            nonce:
              description: Number of transactions made by the sender, in hexadecimal format
              $ref: '#/components/schemas/uint'
            txRejectionStage:
              description: |
                A string detailing the point at which the transaction was rejected. One of:
                - `SEQUENCER`: Rejected by the sequencer
                - `RPC`: Rejected by an RPC node (e.g. `https://rpc.linea.build`)
                - `P2P`: Rejected by a P2P-connected node (for example, a bootnode)
              type: string
              enum: ['SEQUENCER', 'RPC', 'P2P']
            reasonMessage:
              description: Explains why the transaction was rejected
              type: string
            blockNumber:
              description: The block that the transaction was rejected from, in hexadecimal format. Only returned for transactions rejected by the sequencer
              $ref: '#/components/schemas/uint'
            timestamp:
              description: Time of rejection, in ISO 8601 format
              type: string
              format: date-time
  examples:
    - name: linea_getTransactionExclusionStatusV1Example
      description: Note that this example is purely representative; the database retains transaction data for only seven days
      jsonrpc: "2.0"
      method: "linea_getTransactionExclusionStatusV1"
      id: 1
      params: ["0x526e56101cf39c1e717cef9cedf6fdddb42684711abda35bae51136dbb350ad7"]
      result:
        txHash: "0x526e56101cf39c1e717cef9cedf6fdddb42684711abda35bae51136dbb350ad7"
        from: "0x4d144d7b9c96b26361d6ac74dd1d8267edca4fc2"
        nonce: "0x64"
        txRejectionStage: "SEQUENCER"
        reasonMessage: "Transaction line count for module ADD=402 is above the limit 70"
        blockNumber: "0x3039"
        timestamp: "2024-08-22T09:18:51Z"